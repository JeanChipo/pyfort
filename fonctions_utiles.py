from epreuves_mathematiques import epreuve_math
from epreuves_logiques import epreuve_logique
from epreuves_hasard import epreuve_hasard
from enigme_pere_fouras import enigme_pere_fouras

##########

def bold(text:str)->str:
    return "\033[1m" + text + "\033[0m"

def introduction()->None:
    """Affiche le script d'introduction de fort boyard."""
    print(
        bold("üéôÔ∏è Denis brognard :") +'\n'
        "Salut tout le monde, et bienvenue dans l‚Äôincroyable aventure de Fort Boyard ! \n"
        "Aujourd‚Äôhui, nos candidats vont devoir se d√©passer pour relever des d√©fis et, surtout, \n"
        "d√©crocher leur ticket pour la fameuse Salle du Tr√©sor. \n"
        "Rien ne sera facile, mais avec un peu de courage et de strat√©gie, tout est possible. \n"
        '\n' +
        bold("üí° Les r√®gles, c‚Äôest simple :") +'\n'
        "Votre √©quipe doit gagner 3 cl√©s pour ouvrir les portes de la Salle du Tr√©sor. \n"
        "Pour √ßa, vous allez affronter diff√©rentes √©preuves ‚Äì certaines demanderont de la force, \n"
        "d‚Äôautres de la r√©flexion, et parfois... un brin de folie. √Ä chaque d√©fi, un joueur est choisi pour y aller. \n" 
        "Et si vous r√©ussissez, hop, une cl√© pour l‚Äô√©quipe ! \n",
        '\n' +
        bold("üîë Trois cl√©s, et apr√®s ?") +'\n'
        "Une fois les trois cl√©s en poche, les portes de la Salle du Tr√©sor s‚Äôouvrent. \n"
        "Mais attention, ce n‚Äôest que le d√©but : la vraie chasse au tr√©sor ne commencera qu‚Äôune fois √† l‚Äôint√©rieur. \n" 
        "Alors, chaque cl√© compte, et chaque √©preuve est un pas de plus vers la victoire. \n",
        '\n' +
        bold("üéâ Allez, c‚Äôest parti !") +'\n'
        "Prenez une grande inspiration, serrez les coudes, et donnez tout. \n" 
        "Le Fort est rempli de surprises ‚Äì certaines sympas, d‚Äôautres... un peu moins. \n" 
        "Mais une chose est s√ªre : vous allez vivre une aventure que vous n‚Äôoublierez pas de sit√¥t ! \n"
        "Pr√™ts ? Alors, que l‚Äôaventure commence ! \n"
        )

def composer_equipe()->list[dict]:
    """
    Permet de composer une √©quipe de 1 √† 3 joueurs.
    :return: une liste de dictionnaire contenant le nom, la profession, si le joueur est le leader de l'√©quipe, et le nombre de cl√© qu'il a gagn√©
    """
    liste_joueurs = []
    n = int(input("Combien de joueurs se joindrons √† l'aventure ? (PS: le bateau ne peut accueillir que 3 joueurs max) : "))
    while not 1 <= n <= 3:
        n = int(input("Le bateau doit transporter entre 1 et 3 joueurs. \n"
                  "Merci de saisir un nombre de joueur valide : "))

    leader_present = False
    for i in range(n):
        print(f"Joueur n¬∞{i+1}, nous avons besoin de quelques informations sur vous.")
        nom = input("Quel est votre nom ? \n>")
        profession = input("Quel est votre profession ? \n>")
        if not leader_present :
            leader = input("Etes-vous le leader de l'√©quipe (V/F) ? \n>")
            while leader != "V" and leader != "F":
                leader = input("Merci de saisir 'V' ou 'F' : ")
            match leader:
                case "V":
                    liste_joueurs.append({"nom":nom, "profession":profession, "est_leader":True, "cles_gagnees":0})
                    leader_present = True
                case "F":
                    liste_joueurs.append({"nom":nom, "profession":profession, "est_leader":False, "cles_gagnees":0})
                    leader_present = False
        else:   # si il y a d√©j√† un leader, on ne redemande pas
            liste_joueurs.append({"nom": nom, "profession": profession, "est_leader": False, "cles_gagnees": 0})

    if not leader_present:
        print(liste_joueurs[0]["nom"] + ", vous √™tes le leader de l'√©quipe puisque personne ne s'est port√© volontaire.")
        liste_joueurs[0]["est_leader"] = True

    return liste_joueurs

def menu_epreuves()->None or bool:
    """
    affiche le menu des √©preuves permettant √† l'utilisateur de choisir parmi diff√©rents types d'√©preuves disponibles
    :return: None si l'utilisateur choisi l'√©preuve 1, 2 ou 3 / si il choisi l'√©nigme du p√®re fouras, True si il r√©pond correctement et False sinon
    """
    print(
        "1. √âpreuve de Math√©matiques \n"
        "2. √âpreuve de Logique \n"
        "3. √âpreuve du hasard \n"
        "4. √ânigme du P√®re Fouras \n")
    choix = int(input("Choix : "))
    while not 1 <= choix <= 4:
        choix = int(input("Merci de choisir un entier entre 1 et 4 : "))
    match choix:
        case 1: return epreuve_math()
        case 2: return epreuve_logique(joueur="Joueur 1")
        case 3: return epreuve_hasard()
        case 4: return enigme_pere_fouras()

def choisir_joueur(equipe)->dict:
    """
    permet √† l'utilisateur de s√©lectionner un joueur de l'√©quipe pour participer √† une √©preuve
    :param equipe: une liste de dictionnaire contenant les joueurs
    :return: un dictionnaire contenant le joueur choisi
    """
    for i in range(len(equipe)):
        if equipe[i]["est_leader"]: print(f"{i+1}. {equipe[i]['nom']} ({equipe[i]['profession']}) - Leader")
        else: print(f"{i+1}. {equipe[i]['nom']} ({equipe[i]['profession']}) - Membre")
    n = int(input("Entrez le num√©ro du joueur: "))
    while not 1 <= n <= len(equipe):
        n = int(input(f"Merci de saisir un entier entre 1 et {len(equipe)} : "))
    return equipe[n-1]
